@using System.Web.UI.WebControls;
@model Core.Erp.Info.CuentasPorCobrar.cxc_cobro_Info
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridView_cobranza_ret_det";
        settings.CallbackRouteValues = new { Controller = "CobranzaRetenciones", Action = "GridViewPartial_cobranza_ret_det" };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "secuencial";

        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "CobranzaRetenciones", Action = "EditingAddNew", Area = "CuentasPorCobrar" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "CobranzaRetenciones", Action = "EditingUpdate", Area = "CuentasPorCobrar" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "CobranzaRetenciones", Action = "EditingDelete", Area = "CuentasPorCobrar" };

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;

        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;

        //Configuración click derecho
        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsContextMenu.EnableRowMenu = DefaultBoolean.True;

        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["IdCobro_tipo"] = null;
            e.NewValues["dc_ValorPago"] = 0;
        };
        settings.Columns.Add(column =>
        {
            column.Width = Unit.Percentage(70);
            column.FieldName = "IdCobro_tipo";
            column.Caption = "Tipo de retención";

            column.EditorProperties().ComboBox(p =>
            {
                p.Width = Unit.Percentage(100);
                p.ValueField = "IdCobro_tipo";
                p.TextField = "tc_descripcion";
                p.ValueType = typeof(string);
                p.DataSource = ViewBag.lst_retenciones;
                p.ClientSideEvents.SelectedIndexChanged = "SetValorRetencion";
            });
        });
        settings.Columns.Add(column =>
        {
            column.Width = Unit.Percentage(20);
            column.FieldName = "dc_ValorPago";
            column.Caption = "V. aplicado";
            column.PropertiesEdit.DisplayFormatString = "{0:N2}";
            column.EditorProperties().SpinEdit(p =>
            {
                p.Width = Unit.Percentage(100);
                p.MinValue = 0;
                p.DisplayFormatInEditMode = true;
                p.DisplayFormatString = "N2";
            });
        });

    });
}
@grid.Bind(Model.lst_det).GetHtml()