@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "GridView_cobranza";
        settings.CallbackRouteValues = new { Controller = "Cobranza", Action = "GridViewPartial_cobranza" };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "IdCobro";

        //CConfiguracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;
        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;
        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        //Configuracion exportacion
        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToPdf);
            t.Items.Add(GridViewToolbarCommand.ExportToXls);
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
            t.Items.Add(GridViewToolbarCommand.ExportToDocx);
            t.Items.Add(GridViewToolbarCommand.ExportToRtf);
            t.Items.Add(GridViewToolbarCommand.ExportToCsv);
        });
        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        //Evento para pintar de rojo las filas anuladas
        settings.HtmlRowPrepared = (s, e) =>
        {
            if (Convert.ToString(e.GetValue("cr_estado")) == "I")
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }
        };
        settings.Columns.Add(c =>
        {
            c.Caption = "#";
            c.SetDataItemTemplateContent(tc =>
            {
                if (Convert.ToString(DataBinder.Eval(tc.DataItem, "cr_estado")) == "A")
                {
                    ViewContext.Writer.Write(
                Html.ActionLink("Modificar", "Modificar", new { IdSucursal = DataBinder.Eval(tc.DataItem, "IdSucursal"), IdCobro = DataBinder.Eval(tc.DataItem, "IdCobro") }) + "&nbsp;" +
                        Html.ActionLink("Anular", "Anular", new { IdSucursal = DataBinder.Eval(tc.DataItem, "IdSucursal"), IdCobro = DataBinder.Eval(tc.DataItem, "IdCobro") },
                            new { onclick = "return confirm('¿Está seguro de que desea anular el registro?')" })
                    );
                }
            });
            c.SetHeaderTemplateContent(tc =>
            {
                ViewContext.Writer.Write(
                    Html.ActionLink("Nuevo", "Nuevo").ToHtmlString()
                );
            });
            c.Settings.AllowDragDrop = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.Width = Unit.Pixel(150);
        });
        settings.Columns.Add("Su_Descripcion", "Sucursal").Width = Unit.Percentage(20);
        settings.Columns.Add("IdCobro", "ID").Width = Unit.Percentage(10);
        settings.Columns.Add("tc_descripcion", "Tipo").Width = Unit.Percentage(20);
        settings.Columns.Add("pe_nombreCompleto", "Cliente").Width = Unit.Percentage(20);
        settings.Columns.Add(column =>
        {
            column.FieldName = "cr_fecha";
            column.Caption = "Fecha";
            column.PropertiesEdit.DisplayFormatString = "{0:dd/MM/yyyy}";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "cr_TotalCobro";
            column.Caption = "Total";
            column.PropertiesEdit.DisplayFormatString = "{0:N2}";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add("cr_estado", "Estado").Width = Unit.Percentage(5);
        settings.Columns.Add(column =>
        {
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<span class=\"glyphicon  glyphicon-print\" onclick=\"OpenInNewTabWinBrowser('" + Url.Action("CXC_001", "CuentasPorCobrarReportes", new { Area = "Reportes", IdSucursal = DataBinder.Eval(c.DataItem, "IdSucursal"), IdCobro = DataBinder.Eval(c.DataItem, "IdCobro") }, Request.Url.Scheme) + "');\"></span>");
            });
            column.Width = Unit.Percentage(5);
        });
    });
}
@grid.Bind(Model).GetHtml()