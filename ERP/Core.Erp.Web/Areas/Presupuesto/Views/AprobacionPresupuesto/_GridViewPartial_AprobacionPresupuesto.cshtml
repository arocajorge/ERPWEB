@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewPartial_AprobacionPresupuesto";
        settings.CallbackRouteValues = new
        {
            Controller = "AprobacionPresupuesto",
            Action = "GridViewPartial_AprobacionPresupuesto",
            IdSucursal = ViewBag.IdSucursal,
            IdPeriodo = ViewBag.IdPeriodo };
        settings.KeyFieldName = "IdPresupuesto";
        settings.Width = Unit.Percentage(100);

        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
        //CConfiguracion responsive

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;
        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        //Configuracion exportacion
        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToPdf).Text = "Exportar a PDF";
            t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a XLS";
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx).Text = "Exportar a XLSX";
            t.Items.Add(GridViewToolbarCommand.ExportToDocx).Text = "Exportar a DOCX";
            t.Items.Add(GridViewToolbarCommand.ExportToRtf).Text = "Exportar a RTF";
            t.Items.Add(GridViewToolbarCommand.ExportToCsv).Text = "Exportar a CSV";
        });
        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        //Evento para pintar de rojo las filas anuladas
        settings.HtmlRowPrepared = (s, e) =>
        {
            if (Convert.ToBoolean(e.GetValue("Estado")) == false)
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }else
                if (Math.Round(Convert.ToDouble(e.GetValue("MontoSolicitado")),2) == Math.Round(Convert.ToDouble(e.GetValue("MontoAprobado")), 2)
                && !String.IsNullOrEmpty(Convert.ToString(e.GetValue("IdUsuarioAprobacion"))))
            {
                e.Row.ForeColor = System.Drawing.Color.Blue;
            }
        };
        settings.Columns.Add(c =>
        {
            c.Caption = "#";
            c.SetDataItemTemplateContent(tc =>
            {
                if (Convert.ToBoolean(DataBinder.Eval(tc.DataItem, "Estado")) == true &&  String.IsNullOrEmpty(Convert.ToString(DataBinder.Eval(tc.DataItem, "IdUsuarioAprobacion"))) )
                {
                    ViewContext.Writer.Write(
                        Html.ActionLink("Aprobar", "Aprobar", new { IdEmpresa = DataBinder.Eval(tc.DataItem, "IdEmpresa"), IdPresupuesto = DataBinder.Eval(tc.DataItem, "IdPresupuesto") })
                    );
                }
            });
            c.Settings.AllowDragDrop = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.Width = Unit.Pixel(150);
        });


        settings.Columns.Add("IdPresupuesto", "Código").Width = Unit.Percentage(10);
        settings.Columns.Add("Su_Descripcion", "Sucursal").Width = Unit.Percentage(20);
        settings.Columns.Add("DescripcionPeriodo", "Periodo").Width = Unit.Percentage(20);
        settings.Columns.Add("MontoSolicitado", "Monto Solicitado").Width = Unit.Percentage(10);
        settings.Columns.Add("MontoAprobado", "Monto Aprobado").Width = Unit.Percentage(10);
        settings.Columns.Add(column =>
        {
            column.FieldName = "Estado";
            column.Caption = "Estado";
            column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
            column.EditorProperties().CheckBox(sp =>
            {

            });
        });
        settings.Columns.Add(column =>
        {
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<span class=\"glyphicon glyphicon-print\" onclick=\"OpenInNewTabWinBrowser('" + Url.Action("PRE_001", "PresupuestoReportes" , new { Area="Reportes" , IdEmpresa=DataBinder.Eval(c.DataItem, "IdEmpresa" ).ToString(), IdPresupuesto=DataBinder.Eval(c.DataItem, "IdPresupuesto" ).ToString() }, Request.Url.Scheme) + "');\"></span>");
            });
            column.Width = Unit.Percentage(5);
        });
    });
}
@grid.Bind(Model).GetHtml()