@using System.Web.UI.WebControls;
@using Core.Erp.Web.Helps;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridView_notaCredito_det";
        settings.CallbackRouteValues = new { Controller = "NotaDeCreditoFacturacion", Action = "GridViewPartial_notaCredito_det", Area = "Facturacion"};
        settings.KeyFieldName = "Secuencia";

        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "NotaDeCreditoFacturacion", Action = "EditingAddNew", Area = "Facturacion" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "NotaDeCreditoFacturacion", Action = "EditingUpdate", Area = "Facturacion" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "NotaDeCreditoFacturacion", Action = "EditingDelete", Area = "Facturacion" };

        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;

        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Funcion para inicializar fila al presionar nuevo
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["IdProducto"] = 0;
            e.NewValues["IdCod_Impuesto_Iva"] = "IVA0";
            e.NewValues["sc_cantidad"] = "1";
            e.NewValues["sc_Precio"] = "";
            e.NewValues["sc_PordescUni"] = 0;
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "pr_descripcion";
            column.Caption = "Producto";
            column.Width = Unit.Percentage(15);
            column.VisibleIndex = 1;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "IdProducto";
            column.Caption = "Producto";
            column.Width = Unit.Percentage(15);
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.SetEditItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<div id='ajaxDiv'>");
                Html.RenderPartial("_CmbProducto_NotaCrebitoFacturacion", DataBinder.Eval(c.DataItem, "IdProducto"));
                ViewContext.Writer.Write("</div>");
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_cantidad";
            column.Caption = "Cant";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(5);
            column.VisibleIndex = 2;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
                q.ClientSideEvents.ValueChanged = "function(s, e){ CalcularValores();}";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_Precio";
            column.Caption = "Precio";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.VisibleIndex = 3;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
                q.ClientSideEvents.ValueChanged = "function(s, e){ CalcularValores();}";
            });
            column.EditFormSettings.Visible = DefaultBoolean.True;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_PordescUni";
            column.Caption = "% Desc. uni.";
            column.Width = Unit.Percentage(7);
            column.VisibleIndex = 4;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
                q.ClientSideEvents.ValueChanged = "function(s, e){ CalcularValores();}";
            });
            column.EditFormSettings.Visible = DefaultBoolean.True;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IdCod_Impuesto_Iva";
            column.Caption = "Impuesto";
            column.Width = Unit.Percentage(8);
            column.VisibleIndex = 5;
            column.EditorProperties().ComboBox(p =>
            {
                p.Columns.Add("nom_impuesto", "Descripción").Width = Unit.Percentage(100);
                p.TextField = "nom_impuesto";
                p.ValueField = "IdCod_Impuesto";
                p.ValueType = typeof(string);
                p.DataSource = ViewBag.lst_impuesto;
                p.ClientSideEvents.ValueChanged = "function(s, e){ CalcularValores();}";
            });
            column.EditFormSettings.Visible = DefaultBoolean.True;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_precioFinal";
            column.Caption = "Precio final";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.VisibleIndex = 6;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_subtotal";
            column.Caption = "Subtotal";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.Visible = true;
            column.VisibleIndex = 7;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_subtotal_item";
            column.Caption = "Subtotal";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.ReadOnly = true;
            column.Visible = false;
            column.VisibleIndex = 14;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_iva";
            column.Caption = "I.V.A.";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.Visible = true;
            column.VisibleIndex = 8;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_iva_item";
            column.Caption = "I.V.A.";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.ReadOnly = true;
            column.Visible = false;
            column.VisibleIndex = 15;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_total";
            column.Caption = "Total";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.Visible = true;
            column.VisibleIndex = 9;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_total_item";
            column.Caption = "Total";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(7);
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.ReadOnly = true;
            column.Visible = false;
            column.VisibleIndex = 16;
            column.EditorProperties().SpinEdit(q =>
            {
                q.AllowMouseWheel = false;
                q.MinValue = 0;
                q.Width = Unit.Percentage(100);
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IdCentroCosto";
            column.Caption = "Centro de costo";
            column.Width = Unit.Percentage(5);
            column.Visible = false;
            column.VisibleIndex = 10;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.SetEditItemTemplateContent(c =>
            {
                Html.RenderPartial("_CmbCentroCosto_NC", DataBinder.Eval(c.DataItem, "IdCentroCosto"));
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "cc_Descripcion";
            column.Caption = "Centro de costo";
            column.Width = Unit.Percentage(5);
            column.VisibleIndex = 10;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IdPunto_cargo_grupo";
            column.Caption = "Grupo punto de cargo";
            column.Width = Unit.Percentage(5);
            column.VisibleIndex = 11;
            column.EditorProperties().ComboBox(p =>
            {

                p.Columns.Add("IdPunto_cargo_grupo", "ID").Width = Unit.Percentage(10);
                p.Columns.Add("nom_punto_cargo_grupo", "Descripción").Width = Unit.Percentage(50);
                p.ValueField = "IdPunto_cargo_grupo";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.lst_punto_cargo_grupo;
                p.Width = Unit.Percentage(100);
                p.ClientSideEvents.SelectedIndexChanged = "OnSelectedGrupoPuntoCargoChanged";
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IdPunto_cargo";
            column.Caption = "Punto de cargo";
            column.Width = Unit.Percentage(5);
            column.Visible = false;
            column.VisibleIndex = 12;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.SetEditItemTemplateContent(c =>
            {
                Html.RenderPartial("_CmbPuntoCargo", DataBinder.Eval(c.DataItem, "IdPunto_cargo"));
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "nom_punto_cargo";
            column.Caption = "Punto de cargo";
            column.Width = Unit.Percentage(5);
            column.VisibleIndex = 12;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "sc_observacion";
            column.Caption = "Detalle adicional";
            column.Width = Unit.Percentage(5);
            column.Visible = true;
            column.VisibleIndex = 13;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().Memo(q =>
            {

            });
            column.EditFormSettings.Visible = DefaultBoolean.True;
        });
        settings.CellEditorInitialize = (sender, e) =>
        {
            if (e.Column.FieldName == "sc_Precio" && SessionFixed.EsSuperAdmin != "True")
            {
                MVCxGridView g = sender as MVCxGridView;
                e.Editor.ReadOnly = true;
            }
        };
        settings.ClientSideEvents.BeginCallback = "function(s,e){e.customArgs['IdCliente'] = IdCliente.GetValue(); e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val(); }";

        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Subtotal").DisplayFormat = "{0:n2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "sc_iva").DisplayFormat = "{0:n2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "sc_total").DisplayFormat = "{0:n2}";
        settings.Settings.ShowFooter = true;
    });
}
@grid.Bind(Model).GetHtml()

<script type="text/javascript">
    function OnSelectedGrupoPuntoCargoChanged() {
        IdPunto_Cargo.PerformCallback();
    }
    function PuntoCargoComboBox_BeginCallback(s, e) {
        e.customArgs["fx_IdPunto_cargo_grupo"] = GridView_notaCredito_det.GetEditor("IdPunto_cargo_grupo").GetValue();
    }

    function SetPrecioProducto(s, e) {
        var datos = {
            IdProducto: s.GetValue(),
            IdNivel: 0,
            IdCliente: IdCliente.GetValue()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("SetPrecioProducto", "Producto",new { Area = "Inventario" })',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                GridView_notaCredito_det.GetEditor('sc_Precio').SetValue(data.precio);
                GridView_notaCredito_det.GetEditor('IdCod_Impuesto_Iva').SetValue(data.IdCodImpuesto);
            },
            error: function (error) {
            }
        });
    };

    function CalcularValores(s, e) {
        var datos = {
            Cantidad: GridView_notaCredito_det.GetEditor('sc_cantidad').GetValue(),
            Precio: GridView_notaCredito_det.GetEditor('sc_Precio').GetValue(),
            IdCodImpuesto: GridView_notaCredito_det.GetEditor('IdCod_Impuesto_Iva').GetValue(),
            PorcentajeDesc: GridView_notaCredito_det.GetEditor('sc_PordescUni').GetValue()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("CalcularValores", "NotaDeCreditoFacturacion",new { Area = "Facturacion" })',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                GridView_notaCredito_det.GetEditor('sc_subtotal_item').SetValue(data.subtotal);
                GridView_notaCredito_det.GetEditor('sc_iva_item').SetValue(data.iva);
                GridView_notaCredito_det.GetEditor('sc_total_item').SetValue(data.total);
            },
            error: function (error) {
            }
        });
    };
</script>