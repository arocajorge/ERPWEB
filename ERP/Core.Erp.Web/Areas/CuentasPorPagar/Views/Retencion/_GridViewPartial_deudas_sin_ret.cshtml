@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewPartial_deudas_sin_ret";
        settings.CallbackRouteValues = new { Controller = "Retencion", Action = "GridViewPartial_deudas_sin_ret" };


        settings.KeyFieldName = "IdCbteCble_Ogiro";

        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.Width = Unit.Percentage(100);

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;

        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        //Configuracion exportacion
        settings.SettingsExport.EnableClientSideExportAPI = true;

        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        //Evento para pintar de rojo las filas anuladas

        settings.Columns.Add("IdCbteCble_Ogiro", "ID").Width = Unit.Percentage(5);
        settings.Columns.Add("info_proveedor.info_persona.pe_cedulaRuc", "Cédula").Width = Unit.Percentage(10);
        settings.Columns.Add("info_proveedor.info_persona.pe_nombreCompleto", "Proveedor").Width = Unit.Percentage(30);
        settings.Columns.Add(column =>
        {
            column.FieldName = "co_fechaOg";
            column.Caption = "Fecha";
            column.Width = Unit.Percentage(15);
            column.PropertiesEdit.DisplayFormatString = "d";
            column.EditorProperties().DateEdit(sp =>
            {
                column.PropertiesEdit.DisplayFormatString = "d";
                sp.Width = Unit.Percentage(100);
            });
        });
        settings.Columns.Add("co_serie", "Serie").Width = Unit.Percentage(10);
        settings.Columns.Add("co_factura", "Documento").Width = Unit.Percentage(10);
        // settings.Columns.Add("co_observacion", "Observción").Width = Unit.Percentage(10);
        settings.Columns.Add(column =>
        {
            column.FieldName = "co_subtotal_iva";
            column.Caption = "$Base iva";
            column.Width = Unit.Percentage(10);
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
                sp.Width = Unit.Percentage(100);
                column.PropertiesEdit.DisplayFormatString = "n2";

            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "co_subtotal_siniva";
            column.Caption = "$Base 0";
            column.Width = Unit.Percentage(10);
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
                sp.Width = Unit.Percentage(100);
                column.PropertiesEdit.DisplayFormatString = "n2";

            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "co_baseImponible";
            column.Caption = "$Base imp.";
            column.Width = Unit.Percentage(10);
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
                sp.Width = Unit.Percentage(100);
                column.PropertiesEdit.DisplayFormatString = "n2";

            });
        });

        settings.Columns.Add(column =>
        {
            column.Caption = "Aplicar";
            column.Width = Unit.Pixel(100);
            column.SetDataItemTemplateContent(container =>
            {
                Html.DevExpress().HyperLink(hyperlink =>
                {
                    var IdTipoCbte_Ogiro = DataBinder.Eval(container.DataItem, "IdTipoCbte_Ogiro");
                    var IdCbteCble_Ogiro = DataBinder.Eval(container.DataItem, "IdCbteCble_Ogiro");
                    hyperlink.Properties.Text = "Retención";
                    hyperlink.NavigateUrl = Url.Action("Nuevo", "Retencion", new { Area = "CuentasPorPagar", IdEmpresa = Core.Erp.Web.Helps.SessionFixed.IdEmpresa, IdTipoCbte_Ogiro = IdTipoCbte_Ogiro, IdCbteCble_Ogiro = IdCbteCble_Ogiro });
                }).Render();
            });
        });
        settings.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val(); }";

    });
}
@grid.Bind(Model).GetHtml()