@using System.Web.UI.WebControls;
@{
                var grid = Html.DevExpress().GridView(settings => {
                    settings.Name = "GridViewPartial_pagos_cheques_det";
                    settings.CallbackRouteValues = new { Controller = "PagosEnCheques", Action = "GridViewPartial_pagos_cheques_det",  Fecha_ini = ViewBag.fecha_ini, Fecha_fin = ViewBag.fecha_fin, IdSucursal = ViewBag.IdSucursal };

                    settings.Width = Unit.Percentage(100);
                    settings.KeyFieldName = "IdTransaccion";
                    //Configuración para que la grilla no muestre texto completo
                    settings.SettingsBehavior.AllowEllipsisInText = true;
                    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;

                    //Configuracion responsive
                    settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
                    settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
                    settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
                    settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
                    settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

                    //Configuración scrolling y pager
                    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                    settings.Settings.VerticalScrollableHeight = 400;
                    settings.SettingsPager.Visible = true;
                    settings.SettingsPager.PageSize = 10;
                    settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                    settings.SettingsPager.AlwaysShowPager = true;
                    //Configuración filtro por columna
                    settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                    settings.Settings.ShowFilterRow = true;
                    settings.Settings.ShowHeaderFilterButton = true;
                    settings.SettingsBehavior.AllowSelectByRowClick = true;
                    //Configuracion exportacion
                    settings.SettingsExport.EnableClientSideExportAPI = true;
                    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
                    settings.Toolbars.Add(t =>
                    {
                        t.EnableAdaptivity = true;
                        t.Items.Add(GridViewToolbarCommand.ExportToPdf).Text = "Exportar a PDF";
                        t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a XLS";
                        t.Items.Add(GridViewToolbarCommand.ExportToXlsx).Text = "Exportar a XLSX";
                        t.Items.Add(GridViewToolbarCommand.ExportToDocx).Text = "Exportar a DOCX";
                        t.Items.Add(GridViewToolbarCommand.ExportToRtf).Text = "Exportar a RTF";
                        t.Items.Add(GridViewToolbarCommand.ExportToCsv).Text = "Exportar a CSV";
                    });
                    settings.SettingsExport.RenderBrick = (sender, e) =>
                    {
                        if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                            e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
                    };
                    //Evento para pintar de rojo las filas anuladas
                    settings.HtmlRowPrepared = (s, e) =>
                    {
                        if (Convert.ToBoolean(e.GetValue("Estado")) == false)
                        {
                            e.Row.ForeColor = System.Drawing.Color.Red;
                        }
                    };
                    settings.Columns.Add(c =>
                    {
                    c.Caption = "#";
                    c.SetDataItemTemplateContent(tc =>
                    {
                    if (Convert.ToBoolean(DataBinder.Eval(tc.DataItem, "Estado")) == true)
                    {
                        ViewContext.Writer.Write(
                            //Html.ActionLink("Modificar", "Modificar", new { IdEmpresa = DataBinder.Eval(tc.DataItem, "IdEmpresa"), IdTransaccion = DataBinder.Eval(tc.DataItem, "IdTransaccion") }) + "&nbsp;" +
                            Html.ActionLink("Anular", "Anular", new { IdEmpresa = DataBinder.Eval(tc.DataItem, "IdEmpresa"), IdTransaccion = DataBinder.Eval(tc.DataItem, "IdTransaccion") },
                        new { onclick = "return confirm('¿Está IdEmpresa de que desea anular el registro?')" })
            
                                );
                }
            });
            c.SetHeaderTemplateContent(tc =>
            {
                ViewContext.Writer.Write(
                    Html.ActionLink("Nuevo", "Nuevo").ToHtmlString()
                );
            });
            c.Settings.AllowDragDrop = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.Width = Unit.Pixel(150);
        });



        settings.Columns.Add("IdTransaccion","ID").Width = Unit.Percentage(10);
        settings.Columns.Add("Descripcion", "Nómina").Width = Unit.Percentage(30);
        settings.Columns.Add("DescripcionProcesoNomina", "Nómina tipo").Width = Unit.Percentage(30);


        settings.Columns.Add(column =>
        {
            column.FieldName = "pe_FechaIni";
            column.Caption = "Fecha inicio";
            column.Width = Unit.Percentage(8);
            column.PropertiesEdit.DisplayFormatString = "d";

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "pe_FechaFin";
            column.Caption = "Fecha fin";
            column.Width = Unit.Percentage(8);
            column.PropertiesEdit.DisplayFormatString = "d";

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Estado";
            column.Caption = "Estado";
            column.Width = System.Web.UI.WebControls.Unit.Percentage(5);
            column.EditorProperties().CheckBox(sp =>
            {

    });
        });
        settings.Columns.Add(column =>
        {
            column.SetDataItemTemplateContent(c =>
            {
                if (Convert.ToBoolean(DataBinder.Eval(c.DataItem, "estado")) == true)
                {
                    ViewContext.Writer.Write("<span class=\"glyphicon glyphicon-download-alt\" onclick=\"OpenInNewTabWinBrowser('" + Url.Action("get_archivo", "ArchivosTransferencias", new { Area = "RRHH", IdEmpresa = DataBinder.Eval(c.DataItem, "IdEmpresa"), IdArchivo = DataBinder.Eval(c.DataItem, "IdTransaccion") }, Request.Url.Scheme) + "');\"></span>");
                }
            });
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<span class=\"glyphicon  glyphicon-print\" onclick=\"OpenInNewTabWinBrowser('" + Url.Action("ROL_020", "RRHHReportes", new { Area = "Reportes", IdEmpresa = DataBinder.Eval(c.DataItem, "IdEmpresa").ToString(), IdNomina_Tipo = DataBinder.Eval(c.DataItem, "IdNomina_Tipo").ToString(), IdNomina_TipoLiqui = DataBinder.Eval(c.DataItem, "IdNomina_TipoLiqui").ToString(), IdPeriodo = DataBinder.Eval(c.DataItem, "IdPeriodo").ToString() }, Request.Url.Scheme) + "');\"></span>");

            });
            column.Width = Unit.Percentage(5);
        });

    });
}
@grid.Bind(Model).GetHtml()