@using System.Web.UI.WebControls;
    @{
        var grid = Html.DevExpress().GridView(settings => {
            settings.Name = "GridView_prestamos";
            settings.CallbackRouteValues = new { Controller = "Prestamos", Action = "GridViewPartial_prestamos", IdEmpleado = ViewBag.IdEmpleado };

            settings.Width = Unit.Percentage(100);
            settings.KeyFieldName = "IdPrestamo";

            //Configuración para que la grilla no muestre texto completo
            settings.SettingsBehavior.AllowEllipsisInText = true;
            settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
            settings.Width = Unit.Percentage(100);

            //Configuracion responsive
            settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
            settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
            settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
            settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
            settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;


            settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
            settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
            settings.Settings.VerticalScrollableHeight = 400;
            settings.SettingsPager.Visible = true;
            settings.SettingsPager.PageSize = 10;
            settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
            settings.SettingsPager.AlwaysShowPager = true;


            settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            settings.Settings.ShowFilterRow = true;
            settings.Settings.ShowHeaderFilterButton = true;
            settings.SettingsBehavior.AllowSelectByRowClick = true;


            settings.SettingsExport.EnableClientSideExportAPI = true;
            settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
            settings.Toolbars.Add(t =>
            {
                t.EnableAdaptivity = true;
                t.Items.Add(GridViewToolbarCommand.ExportToPdf).Text = "Exportar a PDF";
                t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a XLS";
                t.Items.Add(GridViewToolbarCommand.ExportToXlsx).Text = "Exportar a XLSX";
                t.Items.Add(GridViewToolbarCommand.ExportToDocx).Text = "Exportar a DOCX";
                t.Items.Add(GridViewToolbarCommand.ExportToRtf).Text = "Exportar a RTF";
                t.Items.Add(GridViewToolbarCommand.ExportToCsv).Text = "Exportar a CSV";
            });
            settings.SettingsExport.RenderBrick = (sender, e) =>
            {
                if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                    e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
            };
            settings.HtmlRowPrepared = (s, e) =>
            {
                if (Convert.ToString(e.GetValue("EstadoAprob")) == "APROB")
                {
                    e.Row.ForeColor = System.Drawing.Color.Blue;
                }

                if (Convert.ToBoolean(e.GetValue("Estado")) == false)
                {
                    e.Row.ForeColor = System.Drawing.Color.Red;
                }
            };
            settings.Columns.Add(c =>
            {
                c.Caption = "#";
                c.SetDataItemTemplateContent(tc =>
                {
                    if (Convert.ToBoolean(DataBinder.Eval(tc.DataItem, "Estado")) == true && Convert.ToString(DataBinder.Eval(tc.DataItem, "EstadoAprob")) == "PEND" && Convert.ToInt32(DataBinder.Eval(tc.DataItem, "TotalCobrado")) == 0)
                    {
                        ViewContext.Writer.Write(
                             Html.ActionLink("Modificar", "Modificar", new { IdEmpleado = DataBinder.Eval(tc.DataItem, "IdEmpleado"), IdPrestamo = DataBinder.Eval(tc.DataItem, "IdPrestamo") }) + "&nbsp;" +
                             Html.ActionLink("Anular", "Anular", new { IdEmpleado = DataBinder.Eval(tc.DataItem, "IdEmpleado"), IdPrestamo = DataBinder.Eval(tc.DataItem, "IdPrestamo") },
                                new { onclick = "return confirm('¿Está seguro de que desea anular el registro?')" })
                        );
                    }

                });
                c.SetHeaderTemplateContent(tc =>
                {
                    ViewContext.Writer.Write(
                        Html.ActionLink("Nuevo", "Nuevo").ToHtmlString() + "&nbsp;" + "&nbsp;"
                    );

                });
                c.Settings.AllowDragDrop = DefaultBoolean.False;
                c.Settings.AllowSort = DefaultBoolean.False;
                c.Width = Unit.Pixel(100);
            });

            settings.Columns.Add("IdPrestamo","ID").Width=Unit.Percentage(5);
            settings.Columns.Add("pe_nombre_completo","Empleado").Width = Unit.Percentage(15);
            settings.Columns.Add("ru_descripcion", "Rubro").Width = Unit.Percentage(10);
            settings.Columns.Add("Observacion", "Observación").Width = Unit.Percentage(15);            
            settings.Columns.Add(column =>
            {
                column.FieldName = "Fecha_Transac";
                column.Caption = "Transacción";
                column.Width = Unit.Percentage(9);
                column.PropertiesEdit.DisplayFormatString = "d";
                column.EditorProperties().DateEdit(sp =>
                {
                    column.PropertiesEdit.DisplayFormatString = "d";
                    sp.Width = Unit.Percentage(100);
                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "Fecha_PriPago";
                column.Caption = "1º Pago";
                column.Width = Unit.Percentage(9);
                column.PropertiesEdit.DisplayFormatString = "d";
                column.EditorProperties().DateEdit(sp =>
                {
                    column.PropertiesEdit.DisplayFormatString = "d";
                    sp.Width = Unit.Percentage(100);
                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "MontoSol";
                column.Caption = "$Monto";
                column.Width = Unit.Percentage(7);
                column.EditorProperties().SpinEdit(sp =>
                {
                    sp.MinValue = 0;
                    sp.MaxValue = 999999999;
                    sp.Width = Unit.Percentage(100);
                    column.PropertiesEdit.DisplayFormatString = "n2";

                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "TotalCobrado";
                column.Caption = "$Abonado";
                column.Width = Unit.Percentage(7);
                column.EditorProperties().SpinEdit(sp =>
                {
                    sp.MinValue = 0;
                    sp.MaxValue = 999999999;
                    sp.Width = Unit.Percentage(100);
                    column.PropertiesEdit.DisplayFormatString = "n2";

                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "Valor_pendiente";
                column.Caption = "$Saldo";
                column.Width = Unit.Percentage(7);
                column.EditorProperties().SpinEdit(sp =>
                {
                    sp.MinValue = 0;
                    sp.MaxValue = 999999999;
                    sp.Width = Unit.Percentage(100);
                    column.PropertiesEdit.DisplayFormatString = "n2";

                });
            });
            settings.Columns.Add("EstadoCancelacion", "Est Canc").Width = Unit.Percentage(6);
            settings.Columns.Add(c =>
            {
                c.Caption = "Aplicar";
                c.SetDataItemTemplateContent(tc =>
                {
                    if (Convert.ToBoolean(DataBinder.Eval(tc.DataItem, "Estado")) == true && Convert.ToString(DataBinder.Eval(tc.DataItem, "EstadoAprob")) == "APROB"  && Convert.ToInt32(DataBinder.Eval(tc.DataItem, "Valor_pendiente")) > 0)
                    {
                        ViewContext.Writer.Write(
                             Html.ActionLink("Abono", "Abono", new { IdEmpleado = DataBinder.Eval(tc.DataItem, "IdEmpleado"), IdPrestamo = DataBinder.Eval(tc.DataItem, "IdPrestamo") })
                        );
                    }

                });

                c.Settings.AllowDragDrop = DefaultBoolean.False;
                c.Settings.AllowSort = DefaultBoolean.False;
                c.Width = Unit.Percentage(5);
            });




            settings.Columns.Add(column =>
            {
                column.SetDataItemTemplateContent(c =>
                {
                    ViewContext.Writer.Write("<span class=\"glyphicon  glyphicon-print\" onclick=\"OpenInNewTabWinBrowser('" + Url.Action("ROL_008", "RRHHReportes", new { Area = "Reportes", IdPrestamo = DataBinder.Eval(c.DataItem, "IdPrestamo") }, Request.Url.Scheme) + "');\"></span>");
                });
                column.Width = System.Web.UI.WebControls.Unit.Percentage(4);
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "EstadoBool";
                column.Caption = "Estado";
                column.Width = System.Web.UI.WebControls.Unit.Percentage(5);
                column.EditorProperties().CheckBox(sp =>
                {

                });
            });

        });
}
@grid.Bind(Model).GetHtml()