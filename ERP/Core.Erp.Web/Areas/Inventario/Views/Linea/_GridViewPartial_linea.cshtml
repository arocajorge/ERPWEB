@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "GridView_linea";
        settings.CallbackRouteValues = new { Controller = "Linea", Action = "GridViewPartial_linea", IdCategoria = ViewBag.IdCategoria };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "IdLinea";

        //CConfiguracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;
        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10000;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;
        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        //Configuracion exportacion
        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToPdf);
            t.Items.Add(GridViewToolbarCommand.ExportToXls);
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
            t.Items.Add(GridViewToolbarCommand.ExportToDocx);
            t.Items.Add(GridViewToolbarCommand.ExportToRtf);
            t.Items.Add(GridViewToolbarCommand.ExportToCsv);
        });
        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        //Evento para pintar de rojo las filas anuladas
        settings.HtmlRowPrepared = (s, e) =>
        {
            if (Convert.ToString(e.GetValue("Estado")) == "I")
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }
        };
        settings.Columns.Add(c =>
        {
            c.Caption = "#";
            c.SetDataItemTemplateContent(tc =>
            {
                if (Convert.ToString(DataBinder.Eval(tc.DataItem, "Estado")) == "A")
                {
                    ViewContext.Writer.Write(
                Html.ActionLink("Modificar", "Modificar", new { IdLinea = DataBinder.Eval(tc.DataItem, "IdLinea"), IdCategoria = ViewBag.IdCategoria }) + "&nbsp;" +
                        Html.ActionLink("Anular", "Anular", new { IdLinea = DataBinder.Eval(tc.DataItem, "IdLinea"), IdCategoria = ViewBag.IdCategoria },
                            new { onclick = "return confirm('¿Está seguro de que desea anular el registro?')" })
                    );
                }
            });
            c.SetHeaderTemplateContent(tc =>
            {
                ViewContext.Writer.Write(
                    Html.ActionLink("Nuevo", "Nuevo", new { IdCategoria = ViewBag.IdCategoria }).ToHtmlString()
                );
            });
            c.Settings.AllowDragDrop = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.Width = System.Web.UI.WebControls.Unit.Pixel(150);
        });
        settings.Columns.Add("IdLinea", "ID").Width = Unit.Percentage(10);
        settings.Columns.Add("cod_linea", "Código").Width = Unit.Percentage(20);
        settings.Columns.Add("nom_linea", "Descripción").Width = Unit.Percentage(60);
        settings.Columns.Add("Estado", "Estado").Width = Unit.Percentage(20);


        settings.Columns.Add(column =>
        {
            column.Caption = "Grupo";
            column.Width = Unit.Pixel(120);
            column.SetDataItemTemplateContent(container =>
            {
                Html.DevExpress().HyperLink(hyperlink =>
                {
                    var IdLinea = DataBinder.Eval(container.DataItem, "IdLinea");
                    var IdCategoria = DataBinder.Eval(container.DataItem, "IdCategoria");
                    hyperlink.Properties.Text = "Grupos";
                    hyperlink.NavigateUrl = Url.Action("Index", "Grupo", new { IdCategoria = IdCategoria, IdLinea = IdLinea });
                }).Render();
            });
        });
    });

}
@grid.Bind(Model).GetHtml()